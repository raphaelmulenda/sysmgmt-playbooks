---
- name: Ensure Python is installed
  apt:
    name: python3
    state: present
  register: install_python
- debug:
    var: install_python

- name: Check if Harbor is already installed
  stat:
    path: /data/harbor/
  register: harbor_installed
- debug:
    var: harbor_installed

- name: Install required dependencies
  apt:
    name:
      - curl
      - tar
      - bzip2
      - gzip
      - xz-utils
      - zstd
    state: present
  register: install_dependencies
- debug:
    var: install_dependencies

- name: Check if Harbor installer already exists
  stat:
    path: /tmp/harbor-offline-installer-v2.4.1.tgz
  register: harbor_installer_stat
- debug:
    var: harbor_installer_stat.stat.exists

- name: Download Harbor installer if not present
  get_url:
    url: "https://github.com/goharbor/harbor/releases/download/v2.4.1/harbor-offline-installer-v2.4.1.tgz"
    dest: /tmp/harbor-offline-installer-v2.4.1.tgz
    timeout: 600  # Increase timeout
    checksum: "sha256:af29f7ad2e9cb64c95d1e2fff1184d0f5229b57b"  # Add checksum verification
  when: not harbor_installer_stat.stat.exists
  register: download_harbor
- debug:
    var: download_harbor

- name: Verify Harbor installer size
  stat:
    path: /tmp/harbor-offline-installer-v2.4.1.tgz
  register: harbor_installer_tgz_stat
- debug:
    var: harbor_installer_tgz_stat.stat.size  # Check the file size

- name: Extract Harbor installer
  unarchive:
    src: /tmp/harbor-offline-installer-v2.4.1.tgz
    dest: /tmp
    remote_src: yes
  register: extract_harbor
- debug:
    var: extract_harbor

- name: Ensure Harbor configuration directory exists
  file:
    path: /tmp/harbor
    state: directory
    mode: '0755'
  register: create_harbor_dir
- debug:
    var: create_harbor_dir

- name: Create harbor.yml configuration file
  copy:
    dest: /tmp/harbor/harbor.yml
    content: |
      hostname: 192.168.1.27  # Replace with actual IP
      http:
        port: 8080
      database:
        password: root123
      data_volume: /data/harbor
      harbor_admin_password: Harbor12345
      log:
        level: info
      log_location: /var/log/harbor  # Ensure this line is present
      jobservice:
        max_job_workers: 10
      chart:
        absolute_url: disabled
      notification:
        webhook_job_max_retry: 10  # Required key
  register: create_harbor_config
- debug:
    var: create_harbor_config

- name: Modify prepare script to include 'log_location' key
  blockinfile:
    path: /tmp/harbor/prepare
    insertafter: "config_dict = {"
    before: "^}"
    block: |
      'log_location': configs.get('log_location', '/var/log/harbor'),
  register: modify_prepare
- debug:
    var: modify_prepare

- name: Run the prepare script manually
  shell: |
    cd /tmp/harbor
    ./prepare /tmp/harbor/harbor.yml
  args:
    executable: /bin/bash
  register: run_prepare
- debug:
    var: run_prepare

- name: Install Harbor
  shell: |
    cd /tmp/harbor
    ./install.sh
  args:
    executable: /bin/bash
  register: install_harbor_result
  failed_when: "'no config file' in install_harbor_result.stdout"
- debug:
    var: install_harbor_result

- name: Ensure Harbor is running
  uri:
    url: http://localhost:8080
    status_code: 200
  register: harbor_status
  until: harbor_status.status == 200
  retries: 10
  delay: 10
- debug:
    var: harbor_status